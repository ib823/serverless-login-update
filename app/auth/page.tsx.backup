'use client';

import { useEffect, useRef, useState } from 'react';
import { startRegistration, startAuthentication } from '@simplewebauthn/browser';

export default function AuthPage() {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [status, setStatus] = useState<{type: 'error' | 'success' | null, message: string}>({type: null, message: ''});
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    // Auto-focus with delay for smooth entry
    setTimeout(() => inputRef.current?.focus(), 300);
    
    // Check if already authenticated
    fetch('/api/session')
      .then(r => r.ok && window.location.replace('/account'))
      .catch(() => {});
      
    // Restore saved email
    const saved = localStorage.getItem('lastEmail');
    if (saved) setEmail(saved);
    
    // Add floating particles
    const createParticle = () => {
      const particle = document.createElement('div');
      particle.className = 'particle';
      particle.style.left = Math.random() * window.innerWidth + 'px';
      particle.style.animationDelay = Math.random() * 15 + 's';
      particle.style.animationDuration = (15 + Math.random() * 10) + 's';
      document.body.appendChild(particle);
      
      setTimeout(() => particle.remove(), 25000);
    };
    
    // Create initial particles
    for (let i = 0; i < 5; i++) {
      setTimeout(() => createParticle(), i * 3000);
    }
    
    // Create new particles periodically
    const interval = setInterval(createParticle, 5000);
    
    return () => clearInterval(interval);
  }, []);

  const authenticate = async () => {
    const normalized = email.trim().toLowerCase();
    if (!normalized.includes('@') || loading) return;

    setLoading(true);
    setStatus({type: null, message: ''});
    localStorage.setItem('lastEmail', normalized);
    
    // Add ripple effect to button
    const btn = document.querySelector('.btn');
    if (btn) {
      const rect = btn.getBoundingClientRect();
      const ripple = document.createElement('span');
      ripple.className = 'ripple';
      ripple.style.left = '50%';
      ripple.style.top = '50%';
      btn.appendChild(ripple);
      setTimeout(() => ripple.remove(), 600);
    }

    try {
      const beginResp = await fetch('/api/webauthn/begin', {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ email: normalized })
      });

      if (!beginResp.ok) throw new Error('Network error');
      
      const { mode, options } = await beginResp.json();

      if (mode === 'register') {
        const credential = await startRegistration(options);
        
        const verifyResp = await fetch('/api/webauthn/register/verify', {
          method: 'POST',
          headers: { 'content-type': 'application/json' },
          body: JSON.stringify({ email: normalized, response: credential })
        });

        if (!verifyResp.ok) throw new Error('Registration failed');
        
        setStatus({type: 'success', message: '✨ Success! Redirecting...'});
        
        // Add success pulse
        const card = document.querySelector('.card');
        if (card) {
          const pulse = document.createElement('div');
          pulse.className = 'success-indicator show';
          card.appendChild(pulse);
        }
        
        setTimeout(() => window.location.replace('/account'), 800);
        
      } else {
        const assertion = await startAuthentication(options);
        
        const verifyResp = await fetch('/api/webauthn/auth/verify', {
          method: 'POST',
          headers: { 'content-type': 'application/json' },
          body: JSON.stringify({ email: normalized, response: assertion })
        });

        if (!verifyResp.ok) throw new Error('Authentication failed');
        
        setStatus({type: 'success', message: '✨ Welcome back! Redirecting...'});
        
        // Add success pulse
        const card = document.querySelector('.card');
        if (card) {
          const pulse = document.createElement('div');
          pulse.className = 'success-indicator show';
          card.appendChild(pulse);
        }
        
        setTimeout(() => window.location.replace('/account'), 800);
      }
    } catch (err: any) {
      setLoading(false);
      
      if (err.name === 'AbortError' || err.message?.includes('aborted')) {
        setStatus({type: null, message: ''});
        return;
      }
      
      if (err.name === 'NotAllowedError') {
        setStatus({type: 'error', message: '🔐 Security key not available. Try another browser.'});
      } else if (err.name === 'NotSupportedError') {
        setStatus({type: 'error', message: '⚠️ This browser doesn\'t support passkeys.'});
      } else if (err.message?.includes('Network')) {
        setStatus({type: 'error', message: '🌐 Connection failed. Please try again.'});
      } else {
        setStatus({type: 'error', message: '❌ Authentication failed. Please try again.'});
      }
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') authenticate();
  };

  return (
    <div className="container">
      <div className="card fade-in">
        <h1>Welcome Back</h1>
        <p className="subtitle">Sign in securely with your passkey</p>
        
        <div className="form-group">
          <div className="input-wrapper">
            <input
              ref={inputRef}
              type="email"
              className={`input ${status.type === 'error' ? 'error' : ''}`}
              placeholder="Enter your email"
              value={email}
              onChange={(e) => {
                setEmail(e.target.value);
                if (status.type) setStatus({type: null, message: ''});
              }}
              onKeyPress={handleKeyPress}
              disabled={loading}
              autoComplete="username webauthn"
              autoCapitalize="none"
              autoCorrect="off"
              spellCheck="false"
            />
          </div>
        </div>
        
        <button 
          className={`btn ${loading ? 'loading' : ''}`}
          onClick={authenticate}
          disabled={loading || !email.includes('@')}
          data-tooltip="Use your device's biometric or security key"
        >
          {loading ? '' : 'Continue with Passkey →'}
        </button>

        <div className={`status-message ${status.type ? 'active' : ''} ${status.type || ''}`}>
          {status.message || '\u00A0'}
        </div>
      </div>
    </div>
  );
}
